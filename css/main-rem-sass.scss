
@mixin font-dpr($font-size) {
    font-size: $font-size;
    [data-dpr="2"] & {
        font-size: $font-size * 2;
    }
    [data-dpr="3"] & {
        font-size: $font-size * 3;
    }
}



$rem-baseline: 75px !default;
@function rem-separator($list) {

    @if function-exists("list-separator")==true {
        @return list-separator($list);
    }
    $test-list: ();
    @each $item in $list {
        $test-list: append($test-list, $item, space);
    }
    @return if($test-list==$list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
    font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
    $result: ();
    $separator: rem-separator($values);
    @each $value in $values {
        @if type-of($value)=="number" and unit($value)=="rem" and $to=="px" {
            $result: append($result, $value / 1rem * $rem-baseline, $separator);
        }
        @else if type-of($value)=="number" and unit($value)=="px" and $to=="rem" {
            $result: append($result, $value / ($rem-baseline / 1rem), $separator);
        }
        @else if type-of($value)=="list" {
            $result: append($result, rem-convert($to, $value...), $separator);
        }
        @else {
            $result: append($result, $value, $separator);
        }
    }
    @return if(length($result)==1, nth($result, 1), $result);
}

@function px2rem($values...) {
    //@if $rem-px-only {
    //    @return rem-convert(px, $values...);
    //} @else {
    @return rem-convert(rem, $values...);
    //}
}

@mixin px2rem($properties, $values...) {
    @if type-of($properties)=="map" {
        @each $property in map-keys($properties) {
            @include px2rem($property, map-get($properties, $property));
        }
    }
    @else {
        @each $property in $properties {
            //@if $rem-fallback or $rem-px-only {
            //    #{$property}: rem-convert(px, $values...);
            //}
            //@if not $rem-px-only {
            #{$property}: rem-convert(rem, $values...);
            //}
        }
    }
}

html,
body {
    background: #f2f2f2;
    font-family: "Microsoft YaHei";
}


@mixin stitches-sprite($x: 0, $y: 0, $width: 0,$height: 0) {
    background-position: $x $y;
    width: $width;
    height: $height;
}


.sprite {
    background-image: url(../images/spritesheet.png);    background-repeat: no-repeat;
    display: block;
   
    background-size:px2rem(1414px) px2rem(917px);

    &.sprite-activity {
        
          @include stitches-sprite(px2rem(-5px),px2rem(-5px),px2rem(120px),px2rem(120px));
    }

 }   